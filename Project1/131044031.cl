(setq binaryValue '("true" "false"))
(setq operators   '("+" "-" "/" "*" "(" ")" "**"))
(setq keywords    '("and" "or" "not" "equal" "append" "concat" "set" "defun" "for" "while" "if" "exit"))
(defun read-file-wrapper (in codeListcodeList concatString)
	(setq line (read-char in nil) )
	(cond   ((equal line nil)
	         	(reverse codeList)
	   		)
	        (t 
				(cond   ((char= line #\Space)
							(if (string-not-equal concatString "")
								(push concatString codeList)
							)
							(setq concatString "")
				         	(setq codeList (read-file-wrapper in codeList concatString))
				   		)
				        (t 
							(cond   ((char= line #\Tab)
										(if (string-not-equal concatString "")
											(push concatString codeList)
										)
										(setq concatString "")
							         	(setq codeList (read-file-wrapper in codeList concatString))
							   		)
							        (t 
										(cond   ((char= line #\Newline)
													(if (string-not-equal concatString "")
														(push concatString codeList)
													)
													(setq concatString "")
										         	(setq codeList (read-file-wrapper in codeList concatString))
										   		)
										        (t 
													(cond   ((string-equal (string line) "(")
																(if (string-not-equal concatString "")
																	(push concatString codeList)
																)
																(setq concatString "")
																(push (string line) codeList)
													         	(setq codeList (read-file-wrapper in codeList concatString))
													   		)
													        (t 
																(cond   ((string-equal (string line) ")")
																			(if (string-not-equal concatString "")
																				(push concatString codeList)
																			)
																			(setq concatString "")
																			(push (string line) codeList)
																         	(setq codeList (read-file-wrapper in codeList concatString))
																   		)
																        (t 
																        	(setq concatString (concatenate 'string concatString (string line) ))	
							        										(setq codeList (read-file-wrapper in codeList concatString))
																       	)
																)
													       	)
													)
										       	)
										)
							       	)
							)
				       	)
				)
	       	)
	)
)
(defun read-file (codeList fileName)
	(setq concatString "")
	(setq in (open fileName :if-does-not-exist nil))
	(setq codeList (read-file-wrapper in codeList concatString))
	(close in)
	codeList
)
(defun determine-tokens-wrapper (code_token selectToken returnVal)
	(if (null selectToken) returnVal )
	(cond   ((string-equal code_token (car selectToken)) (setq returnVal 1) returnVal ) )
	(if (and (/= 0 (length selectToken)) (= returnVal 0))
		(setq returnVal (determine-tokens-wrapper code_token (cdr selectToken) returnVal))
	)
	returnVal
)
(defun determine-tokens (code_token resultList)
	(setq subList '())
	(if (null code_token)   resultList )
	(setq returnVal 0)
	(setq result1 (determine-tokens-wrapper (car code_token) binaryValue  returnVal))
	(setq result2 (determine-tokens-wrapper (car code_token) operators    returnVal))
	(setq result3 (length (string-trim "0123456789-" (car code_token) )))
	(setq result4 (determine-tokens-wrapper (car code_token) keywords     returnVal))
	(setq result5 (length (string-trim "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" (car code_token) )))
	(cond   ((and (= result1 1) (/= (length (car code_token)) 0)) (push (car code_token) subList) (push "binary" subList) (push subList resultList))
			(t
				(cond   ((and (= result2 1) (/= (length (car code_token)) 0)) (push (car code_token) subList) (push "operator" subList) (push subList resultList))
					(t
						(cond   ((and (= result3 0) (/= (length (car code_token)) 0)) (push (car code_token) subList) (push "integer" subList) (push subList resultList))
							(t
								(cond   ((and (= result4 1) (/= (length (car code_token)) 0))(push (car code_token) subList) (push "keyword" subList) (push subList resultList))
									(t
										(cond   ((and (= result5 0) (= result4 0) (/= (length (car code_token)) 0))(push (car code_token) subList) (push "identifier" subList) (push subList resultList))
											(t
													(cond   ((/= (length (car code_token)) 0)
															(push (car code_token) subList) (push "error" subList) (push subList resultList)
	   													    )
													)
											)
										)
									)
								)
							)
						)
					)
				)
			)
	)
	(if (/= (length code_token)  0) (setq resultList (determine-tokens (cdr code_token) resultList) ) )
 	resultList 
)
(defun lexer(fileName)
	(setq parsedList  '()) (setq codeList    '()) (setq codeTokens  '()) (setq resultList  '())
	(setq codeList    (read-file codeList fileName) )
	(print codeList)
	(setq resultList  (determine-tokens codeList resultList))
	(print (reverse resultList))
)
(lexer "myfile.txt")